
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========= GanjaDAO Clube =========

model User {
  id                Int      @id @default(autoincrement())
  username          String   @unique
  email             String   @unique
  password          String   // Hashed password
  is_admin          Boolean  @default(false)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  subscription      Subscription?     // Um usuário pode ter uma assinatura
  initiatives       Initiative[]      // Um usuário pode criar múltiplas iniciativas
  votes             Vote[]            // Um usuário pode ter múltiplos votos
  vote_credits      UserVoteCredit?   // Um usuário tem um saldo de créditos de voto
  anvisa_manifestations AnvisaManifestation[] // Um usuário pode ter múltiplas manifestações ANVISA salvas
  legal_documents   LegalDocument[]   // Um usuário pode ter documentos jurídicos salvos

  // Comunidade
  posts             Post[]           // Um usuário pode criar múltiplos posts
  comments          Comment[]        // Um usuário pode fazer múltiplos comentários
  post_likes        PostLike[]       // Um usuário pode curtir múltiplos posts
  comment_likes     CommentLike[]    // Um usuário pode curtir múltiplos comentários

  @@map("users") // Mapeia para a tabela existente "users"
}

model Subscription {
  id              Int      @id @default(autoincrement())
  user_id         Int      @unique // Chave estrangeira para User, assinatura é única por usuário
  status          String   // Ex: "active", "canceled", "pending_payment"
  started_at      DateTime @default(now())
  expires_at      DateTime? // Para assinaturas com data de expiração
  canceled_at     DateTime?
  payment_details String?  // Pode ser um JSON com detalhes ou ID de um sistema de pagamento
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  user            User     @relation(fields: [user_id], references: [id])

  @@map("subscriptions")
}

model Initiative {
  id          Int      @id @default(autoincrement())
  title       String
  description String   // TEXT
  user_id     Int      // Autor da iniciativa
  status      String   @default("open") // Ex: "open", "closed", "canceled"
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  author      User     @relation(fields: [user_id], references: [id])
  votes       Vote[]   // Uma iniciativa pode ter múltiplos votos

  @@map("initiatives")
}

model Vote {
  id                Int      @id @default(autoincrement())
  user_id           Int
  initiative_id     Int
  credits_spent     Int      // Quantos créditos o usuário alocou para esta iniciativa
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  user              User     @relation(fields: [user_id], references: [id])
  initiative        Initiative @relation(fields: [initiative_id], references: [id])

  @@unique([user_id, initiative_id]) // Garante que um usuário vote (aloque créditos) apenas uma vez por iniciativa
  @@map("votes")
}

model UserVoteCredit {
  id             Int      @id @default(autoincrement())
  user_id        Int      @unique
  total_credits  Int      @default(100) // Créditos iniciais ou saldo atual
  last_reset_at  DateTime? // Para controle de resets periódicos
  updated_at     DateTime @updatedAt

  user           User     @relation(fields: [user_id], references: [id])

  @@map("user_vote_credits")
}

// ========= GanjaDAO Comunidade (Fórum) =========

model Post {
  id           Int       @id @default(autoincrement())
  title        String
  content      String    // TEXT
  user_id      Int
  category     String?   // Ex: "geral", "jurídico", "política", etc.
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  author       User      @relation(fields: [user_id], references: [id])
  comments     Comment[] // Um post pode ter múltiplos comentários
  likes        PostLike[] // Um post pode ter múltiplos likes

  @@map("posts")
}

model Comment {
  id           Int       @id @default(autoincrement())
  content      String    // TEXT
  user_id      Int
  post_id      Int
  parent_id    Int?      // Para comentários aninhados (replies)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  author       User      @relation(fields: [user_id], references: [id])
  post         Post      @relation(fields: [post_id], references: [id])
  parent       Comment?  @relation("CommentToComment", fields: [parent_id], references: [id])
  replies      Comment[] @relation("CommentToComment")
  likes        CommentLike[] // Um comentário pode ter múltiplos likes

  @@map("comments")
}

model PostLike {
  id           Int       @id @default(autoincrement())
  user_id      Int
  post_id      Int
  created_at   DateTime  @default(now())

  user         User      @relation(fields: [user_id], references: [id])
  post         Post      @relation(fields: [post_id], references: [id])

  @@unique([user_id, post_id]) // Garante que um usuário curta um post apenas uma vez
  @@map("post_likes")
}

model CommentLike {
  id           Int       @id @default(autoincrement())
  user_id      Int
  comment_id   Int
  created_at   DateTime  @default(now())

  user         User      @relation(fields: [user_id], references: [id])
  comment      Comment   @relation(fields: [comment_id], references: [id])

  @@unique([user_id, comment_id]) // Garante que um usuário curta um comentário apenas uma vez
  @@map("comment_likes")
}

// ========= GanjaDAO App (Módulos Adicionais) =========

model AnvisaManifestation {
  id                  Int      @id @default(autoincrement())
  user_id             Int?     // Opcional, se o usuário estiver logado ao salvar
  name                String
  email               String
  cpf_cnpj            String?  // Pode ser CPF ou CNPJ
  entity_represented  String?  // Nome da entidade, se houver
  city                String?
  state               String?
  manifestation_text  String   // TEXT
  created_at          DateTime @default(now())

  user                User?    @relation(fields: [user_id], references: [id])

  @@map("anvisa_manifestations")
}

// Modelo para Conteúdo Educacional
model Content {
  id          Int      @id @default(autoincrement())
  slug        String   @unique
  title       String
  body        String   // TEXT ou Markdown
  author_id   Int?     // Opcional, se tiver um autor logado
  category    String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
 
  author      User?    @relation(fields: [author_id], references: [id])
 
  @@map("contents")
}

// Modelo para Documentos Jurídicos Gerados
model LegalDocument {
  id                  Int      @id @default(autoincrement())
  user_id             Int
  document_type       String   // Ex: "HC_PREVENTIVO", "NOTIFICACAO_EXTRAJUDICIAL"
  form_data           String   // JSON com os dados do formulário que gerou o documento
  generated_pdf_path  String?  // Caminho para o PDF salvo, ou poderia ser um Blob
  created_at          DateTime @default(now())
 
  user                User     @relation(fields: [user_id], references: [id])
 
  @@map("legal_documents")
}

// Modelo para templates de documentos jurídicos
model LegalTemplate {
  id              Int       @id @default(autoincrement())
  name            String    @unique
  document_type   String    // Categoria do documento
  template_content String    // Conteúdo do template em formato compatível com sistema de templates
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  
  @@map("legal_templates")
}

// Modelo para jurisprudências e decisões judiciais
model Jurisprudence {
  id              Int       @id @default(autoincrement())
  title           String
  court           String    // Tribunal que emitiu a decisão
  decision_date   DateTime
  summary         String    // Resumo da decisão
  full_text       String    // Texto completo da decisão
  tags            String    // Tags para classificação, separadas por vírgula
  source_url      String?   // URL da fonte da decisão, se disponível
  created_at      DateTime  @default(now())
  
  @@map("jurisprudences")
}

// Modelo para Sessões (usado por connect-sqlite3, Prisma não gerencia diretamente, mas para referência)
// A tabela `sessions` é criada e gerenciada pelo connect-sqlite3.
// Se fosse usar Prisma para sessões, seria algo como:
// model Session {
//   id        String   @id
//   sid       String   @unique
//   data      String
//   expiresAt DateTime
// 
//   @@map("sessions")
// }
